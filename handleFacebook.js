(function () {
    console.log("üöÄ [Ext] Handle Facebook script loaded (v19 - Fix URL & Line Breaks).");

    // === C√ÅC SELECTOR CH√çNH X√ÅC T·ª™ V4 DEBUG ===
    // CH·ªà qu√©t t√¨m n√∫t "3 ch·∫•m" theo y√™u c·∫ßu
    const ANCHOR_SELECTOR = '[aria-label="H√†nh ƒë·ªông v·ªõi b√†i vi·∫øt n√†y"]';
    
    // Class ƒë·ªÉ ƒë√°nh d·∫•u n√∫t c·ªßa ch√∫ng ta
    const INJECTED_CLASS = "ext-summarize-btn";
    // Thu·ªôc t√≠nh ƒë·ªÉ ƒë√°nh d·∫•u container ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    const PROCESSED_MARKER = "data-ext-summarize-processed";

    /**
     * H√†m ch√≠nh ƒë·ªÉ qu√©t v√† ch√®n n√∫t.
     */
    let scanCounter = 0;
    const scanAndAttachFacebook = () => {
        scanCounter++;
        // console.log(`[Ext] Qu√©t l·∫ßn th·ª© ${scanCounter}...`);

        // 1. T√¨m T·∫§T C·∫¢ c√°c n√∫t "3 ch·∫•m" tr√™n to√†n trang
        const anchorButtons = document.querySelectorAll(ANCHOR_SELECTOR);

        if (anchorButtons.length === 0) {
            // console.log("[Ext] Kh√¥ng t√¨m th·∫•y n√∫t anchor (3 ch·∫•m) n√†o.");
            return;
        }

        anchorButtons.forEach((anchorButton, index) => {
            
            // 2. Leo c·∫•p DOM ƒë·ªÉ t√¨m container
            let targetContainer = null;
            let beforeElement = null;
            let wrapper = null;

            // T√åM TH·∫§Y N√öT "3 CH·∫§M"
            // Leo 2 c·∫•p (div.button -> div.wrapper -> div.container)
            wrapper = anchorButton.parentElement;
            if (wrapper) wrapper = wrapper.parentElement; 

            if (wrapper && wrapper.parentElement) {
                targetContainer = wrapper.parentElement;
                // Ch√®n v√†o TR∆Ø·ªöC wrapper c·ªßa n√∫t 3 ch·∫•m
                beforeElement = wrapper;
            } else {
                console.warn(`[Ext] ‚ö†Ô∏è L·ªói logic 3 ch·∫•m: Kh√¥ng t√¨m th·∫•y container.`, anchorButton);
                return;
            }
            

            // 3. Ki·ªÉm tra xem container n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
            if (!targetContainer || targetContainer.hasAttribute(PROCESSED_MARKER)) {
                // Container kh√¥ng h·ª£p l·ªá HO·∫∂C ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                return;
            }

            // 4. ƒê√°nh d·∫•u container l√† ƒë√£ x·ª≠ l√Ω
            targetContainer.setAttribute(PROCESSED_MARKER, "1");

            // 5. Ch√®n n√∫t
            injectButton(targetContainer, beforeElement, index);
        });
    };

    /**
     * T√°ch logic l·∫•y th√¥ng tin b√†i vi·∫øt ra h√†m ri√™ng
     * H√†m n√†y l√† ASYNC ƒë·ªÉ x·ª≠ l√Ω "Xem th√™m"
     */
    const getPostInfo = async (post) => {
        
        // === S·ª¨A L·ªñI 1: L·∫§Y T√ÅC GI·∫¢ ===
        let authorName = 'Kh√¥ng t√¨m th·∫•y t√°c gi·∫£';
        let authorUrl = 'Kh√¥ng t√¨m th·∫•y URL t√°c gi·∫£';
        let authorEl = null;

        // Method 1: D√πng aria-labelledby (ƒê√°ng tin c·∫≠y nh·∫•t)
        const authorLabelId = post.getAttribute('aria-labelledby');
        if (authorLabelId) {
            const labelEl = document.getElementById(authorLabelId); // ƒê√¢y l√† element c√≥ ID
            if (labelEl) {
                authorEl = labelEl.querySelector('a'); // Th·ª≠ t√¨m th·∫ª <a> b√™n trong
                if (authorEl) {
                    authorName = authorEl.innerText.trim();
                    authorUrl = authorEl.href;
                } else {
                    authorName = labelEl.innerText.trim(); // Fallback n·∫øu kh√¥ng c√≥ th·∫ª <a>
                }
            }
        }

        // Method 2: Fallback v·ªÅ logic c≈© n·∫øu Method 1 th·∫•t b·∫°i
        if (authorName === 'Kh√¥ng t√¨m th·∫•y t√°c gi·∫£') {
            authorEl = post.querySelector('h4 a, strong a'); // B·ªè b·ªõt selector kh√¥ng ƒë√°ng tin c·∫≠y
            if (authorEl) {
                 authorName = authorEl.innerText.trim();
                 authorUrl = authorEl.href;
            }
        }

        // === S·ª¨A L·ªñI authorUrl (Lo·∫°i b·ªè tracking params) ===
        if (authorUrl && authorUrl.startsWith('http')) {
            try {
                const url = new URL(authorUrl);
                authorUrl = url.origin + url.pathname; // Ch·ªâ l·∫•y domain + path
            } catch (e) {
                console.warn("[Ext] Kh√¥ng th·ªÉ parse authorUrl, d√πng gi√° tr·ªã g·ªëc.", e);
            }
        }
        
        // 2. Th·ªùi gian & URL B√†i vi·∫øt
        const timeEl = post.querySelector('a[href*="/posts/"], a[href*="?story_fbid="], a[href*="/videos/"], a[href*="/watch/"]');
        const timeText = timeEl ? timeEl.innerText.trim() : 'Kh√¥ng t√¨m th·∫•y th·ªùi gian';
        let postUrl = timeEl ? timeEl.href : 'Kh√¥ng t√¨m th·∫•y URL b√†i vi·∫øt';

        // T∆∞∆°ng t·ª±, l√†m s·∫°ch postUrl
        if (postUrl && postUrl.startsWith('http')) {
             try {
                const url = new URL(postUrl);
                postUrl = url.origin + url.pathname; 
            } catch (e) {
                console.warn("[Ext] Kh√¥ng th·ªÉ parse postUrl, d√πng gi√° tr·ªã g·ªëc.", e);
            }
        }

        // 3. N·ªôi dung (LOGIC M·ªöI - T·ª∞ ƒê·ªòNG CLICK "XEM TH√äM")
        let postContent = "";
        const messageBlock = post.querySelector('div[data-ad-preview="message"]');
        
        if (messageBlock) {
            // A. T√¨m n√∫t "Xem th√™m" B√äN TRONG kh·ªëi message
            const seeMoreButton = Array.from(messageBlock.querySelectorAll('div[role="button"]'))
                                      .find(btn => btn.innerText.includes("Xem th√™m") || btn.innerText.includes("See more"));

            // B. N·∫øu t√¨m th·∫•y -> click v√† ch·ªù
            if (seeMoreButton) {
                console.log("[Ext] 'Xem th√™m' detected. Clicking and waiting 500ms...");
                seeMoreButton.click();
                // Ch·ªù 500ms ƒë·ªÉ Facebook m·ªü r·ªông n·ªôi dung
                await new Promise(resolve => setTimeout(resolve, 500)); 
                console.log("[Ext] Waited 500ms. Now scraping expanded content.");
            }

            // C. (Sau khi ƒë√£ click, ho·∫∑c n·∫øu kh√¥ng c√≥ n√∫t)
            const clone = messageBlock.cloneNode(true);

            // X√≥a n√∫t "Xem th√™m" (ph·∫£i l√†m TR∆Ø·ªöC khi x·ª≠ l√Ω emoji)
            clone.querySelectorAll('div[role="button"]').forEach(button => {
                if (button.innerText.includes("Xem th√™m") || button.innerText.includes("See more")) {
                    button.remove();
                }
            });

            // === S·ª¨A L·ªñI 2: X·ª¨ L√ù EMOJI ===
            // Thay th·∫ø t·∫•t c·∫£ <img> emoji b·∫±ng k√Ω t·ª± 'alt' c·ªßa ch√∫ng
            clone.querySelectorAll('img[alt]').forEach(emoji => {
                if (emoji.alt) {
                    // Thay th·∫ø <img> b·∫±ng m·ªôt text node ch·ª©a n·ªôi dung 'alt'
                    emoji.replaceWith(document.createTextNode(emoji.alt));
                } else {
                    // X√≥a img n·∫øu kh√¥ng c√≥ alt ƒë·ªÉ tr√°nh r√°c
                    emoji.remove();
                }
            });
            
            // === S·ª¨A L·ªñI 3: X·ª¨ L√ù XU·ªêNG D√íNG ===
            // Facebook d√πng c√°c <div dir="auto"> cho m·ªói d√≤ng/ƒëo·∫°n.
            // L·∫•y text c·ªßa t·ª´ng div v√† join l·∫°i b·∫±ng k√Ω t·ª± xu·ªëng d√≤ng.
            const paragraphDivs = clone.querySelectorAll('div[dir="auto"]');
            if (paragraphDivs.length > 0) {
                postContent = Array.from(paragraphDivs)
                    .map(p => p.innerText) // Kh√¥ng .trim() ·ªü ƒë√¢y ƒë·ªÉ gi·ªØ th·ª•t ƒë·∫ßu d√≤ng (n·∫øu c√≥)
                    .join('\n'); // N·ªëi l·∫°i b·∫±ng d·∫•u xu·ªëng d√≤ng th·∫≠t
            } else {
                // Fallback n·∫øu c·∫•u tr√∫c kh√°c (v√≠ d·ª•: kh√¥ng c√≥ 'div[dir="auto"]' l·ªìng nhau)
                postContent = clone.innerText.trim(); 
            }

        } else {
            // Fallback v·ªÅ logic c≈© n·∫øu kh√¥ng t√¨m th·∫•y 'messageBlock'
            console.warn("[Ext] Kh√¥ng t√¨m th·∫•y 'data-ad-preview=\"message\"'. D√πng logic c≈©.");
            const contentElements = post.querySelectorAll('div[dir="auto"]');
            contentElements.forEach(el => {
                const role = el.getAttribute('role');
                const hasSeeMore = el.querySelector('div[role="button"]');
                if (role !== 'button' && !hasSeeMore) {
                    postContent += el.innerText + "\n";
                }
            });
            postContent = postContent.trim();
        }
        
        // 4. Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng
        return {
            authorName,
            authorUrl,
            timeText,
            postUrl,
            postContent: postContent || "Kh√¥ng t√¨m th·∫•y n·ªôi dung text."
        };
    };


    /**
     * H√†m t·∫°o v√† ch√®n n√∫t
     */
    const injectButton = (targetContainer, beforeElement, index) => {
        
        const summarizeBtn = document.createElement("div");
        summarizeBtn.innerText = "T√≥m T·∫Øt";
        summarizeBtn.title = "T√≥m t·∫Øt b√†i vi·∫øt n√†y (b·ªüi L·∫≠p's Ext)";
        summarizeBtn.className = INJECTED_CLASS; // Th√™m class

        Object.assign(summarizeBtn.style, {
            cursor: "pointer",
            padding: "8px",
            borderRadius: "6px",
            fontWeight: "bold",
            fontSize: "13px",
            color: "var(--primary-text-color, #050505)", // <-- THAY ƒê·ªîI M√ÄU
            lineHeight: "1",
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
        });
        summarizeBtn.onmouseover = () => { summarizeBtn.style.backgroundColor = "var(--hover-overlay, #EBEDF0)"; }; // <-- D√πng m√†u hover c·ªßa FB
        summarizeBtn.onmouseout = () => { summarizeBtn.style.backgroundColor = "transparent"; };

        // S·ª≠a th√†nh ASYNC function ƒë·ªÉ c√≥ th·ªÉ "await"
        summarizeBtn.onclick = async (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log(`[Ext] N√∫t 'T√≥m T·∫Øt' ƒë∆∞·ª£c click!`);
            
            // Leo l√™n t√¨m `div[aria-labelledby]` g·∫ßn nh·∫•t, v√¨ `div[role="article"]` kh√¥ng ƒë√°ng tin c·∫≠y
            const post = targetContainer.closest('div[aria-labelledby]');
            if (!post) {
                console.error("[Ext] Kh√¥ng th·ªÉ t√¨m th·∫•y 'post' g·ªëc (div[aria-labelledby]) khi click!");
                return;
            }

            console.log("[Ext] ƒêang l·∫•y th√¥ng tin b√†i vi·∫øt (c√≥ th·ªÉ m·∫•t 0.5s)...");
            // G·ªçi h√†m async v√† ch·ªù k·∫øt qu·∫£
            const postInfo = await getPostInfo(post);

            console.log("[Ext] Th√¥ng tin b√†i vi·∫øt:", postInfo);
        };

        targetContainer.insertBefore(summarizeBtn, beforeElement);
        // console.log(`[Ext] ‚úÖ ƒê√£ ch√®n n√∫t 'T√≥m T·∫Øt' (Anchor #${index}).`); // T·∫Øt b·ªõt log
    }


    // 7. S·ª≠ d·ª•ng MutationObserver...
    console.log("[Ext] ƒêang t·∫°o MutationObserver (v19)...");
    let debounceTimer;
    const observer = new MutationObserver((mutationsList) => {
        // Ch·ªâ c·∫ßn bi·∫øt c√≥ thay ƒë·ªïi l√† qu√©t
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(scanAndAttachFacebook, 300); // TƒÉng debounce
    });

    observer.observe(document.body, { childList: true, subtree: true });

    // 8. Ch·∫°y qu√©t l·∫ßn ƒë·∫ßu sau 1.5 gi√¢y (ch·ªù trang t·∫£i)
    console.log("[Ext] Ch·ªù 1.5s ƒë·ªÉ qu√©t l·∫ßn ƒë·∫ßu...");
    setTimeout(scanAndAttachFacebook, 1500);

})();

