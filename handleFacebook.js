(function () {
    console.log("üöÄ [Ext] Handle Facebook script loaded (v40 - Group Content Fix).");

    // === CONFIG PROXY API URL ===
    // ƒê·ªçc MIN_SUMMARY_LENGTH t·ª´ config.js, n·∫øu kh√¥ng c√≥ th√¨ m·∫∑c ƒë·ªãnh l√† 100
    const PROXY_URL = (typeof API !== 'undefined' && API) ? API : "PROXY_URL_NOT_FOUND_IN_CONFIG";
    const MIN_LENGTH = (typeof MIN_SUMMARY_LENGTH !== 'undefined') ? MIN_SUMMARY_LENGTH : 100;
    
    const ANCHOR_SELECTOR = '[aria-label="H√†nh ƒë·ªông v·ªõi b√†i vi·∫øt n√†y"]';
    const INJECTED_CLASS = "ext-summarize-btn";
    const PROCESSED_MARKER = "data-ext-summarize-processed";

    // === H√ÄM HI·ªÇN TH·ªä POPUP ===
    /**
     * M·ªü c·ª≠a s·ªï pop-up ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung t√≥m t·∫Øt ho·∫∑c th√¥ng b√°o l·ªói.
     * @param {string} summaryContent N·ªôi dung HTML/Text t√≥m t·∫Øt (ho·∫∑c l·ªói).
     * @param {object} postInfo Metadata b√†i vi·∫øt.
     * @param {boolean} isShortPost C·ªù cho bi·∫øt ƒë√¢y l√† th√¥ng b√°o b√†i vi·∫øt ng·∫Øn.
     */
    const showSummaryPopup = (summaryContent, postInfo, isShortPost = false) => {
        try {
            const isError = summaryContent.includes("L·ªói");
            
            const popupWidth = 600, popupHeight = 500;
            const left = (window.screen.width / 2) - (popupWidth / 2);
            const top = (window.screen.height / 2) - (popupHeight / 2);
            const popup = window.open("", "summaryPopup", `width=${popupWidth},height=${popupHeight},top=${top},left=${left},scrollbars=yes,resizable=yes`);
            
            if (popup) {
                popup.document.open();
                
                // Chu·∫©n b·ªã th√¥ng tin metadata (ƒë√£ l√†m s·∫°ch)
                const metadata = `
                    <p style="border-bottom: 1px solid #ddd; padding-bottom: 5px; margin-bottom: 10px;">
                        <strong>T√°c gi·∫£:</strong> ${postInfo.authorName} (<a href="${postInfo.authorUrl}" target="_blank">Link</a>)<br>
                        <strong>Ngu·ªìn:</strong> ${postInfo.groupName || 'Trang c√° nh√¢n/Fanpage'} ${postInfo.groupUrl ? `(<a href="${postInfo.groupUrl}" target="_blank">Link</a>)` : ''}<br>
                        <strong>Th·ªùi gian:</strong> ${postInfo.timeText}
                    </p>
                `;
                
                // Thay ƒë·ªïi style d·ª±a tr√™n tr·∫°ng th√°i
                let titleText;
                let titleColor;
                let summaryBoxStyle;

                if (isError) {
                    titleText = "TH√îNG B√ÅO L·ªñI";
                    titleColor = "#f00";
                    summaryBoxStyle = "background: #ffebeb; color: #cc0000; border: 1px solid #f00;";
                } else if (isShortPost) {
                    titleText = "TH√îNG B√ÅO";
                    titleColor = "#ff9800"; // M√†u cam cho c·∫£nh b√°o
                    summaryBoxStyle = "background: #fff8e1; color: #ff9800; border: 1px solid #ff9800;";
                } else {
                    titleText = "K·∫øt Qu·∫£ T√≥m T·∫Øt (Gemini AI)";
                    titleColor = "#1877f2";
                    summaryBoxStyle = "background: #f0f2f5; color: #333;";
                }


                popup.document.write(`
                    <html>
                    <head>
                        <title>${titleText} - ${postInfo.authorName}</title>
                        <style>
                            body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; padding: 20px; line-height: 1.6; background: #fff; color: #333; }
                            h2 { color: ${titleColor}; margin-top: 0; padding-bottom: 10px; border-bottom: 2px solid ${titleColor}; }
                            strong { font-weight: 600; }
                            p { margin: 8px 0; }
                            .summary-box { padding: 15px; border-radius: 8px; white-space: pre-wrap; word-wrap: break-word; ${summaryBoxStyle} }
                        </style>
                    </head>
                    <body>
                        <h2>${titleText}</h2>
                        ${(isError || isShortPost) ? '' : metadata} 
                        <div class="summary-box">${summaryContent}</div>
                    </body>
                    </html>
                `);
                popup.document.close();
                popup.focus();
            } else {
                console.warn("[Ext] Vui l√≤ng cho ph√©p c·ª≠a s·ªï pop-up ƒë·ªÉ xem t√≥m t·∫Øt.");
            }
        } catch (e) { 
            console.error("[Ext] L·ªói khi m·ªü popup:", e); 
        }
    };


    // === H√ÄM G·ªåI PROXY AI ƒê·ªÇ T√ìM T·∫ÆT ===
    /**
     * G·ªçi Google App Script ƒë·ªÉ t√≥m t·∫Øt n·ªôi dung b√†i vi·∫øt (an to√†n).
     * @param {string} content N·ªôi dung b√†i vi·∫øt c·∫ßn t√≥m t·∫Øt.
     * @returns {Promise<string>} K·∫øt qu·∫£ t√≥m t·∫Øt (ho·∫∑c th√¥ng b√°o l·ªói).
     */
    const summarizePostContent = async (content) => {
        // 1. Ki·ªÉm tra URL proxy
        if (!PROXY_URL || PROXY_URL === "PROXY_URL_NOT_FOUND_IN_CONFIG") {
            return "L·ªói c·∫•u h√¨nh: Kh√¥ng t√¨m th·∫•y URL Proxy (bi·∫øn API trong config.js).";
        }
        
        // 2. L·∫•y gi√° tr·ªã 'pass' t·ª´ chrome.storage.local
        const pass = await new Promise(resolve => {
            // C·∫ßn c√≥ quy·ªÅn 'storage' trong manifest.json
            chrome.storage.local.get(['pass'], (result) => resolve(result.pass || ''));
        });

        // 3. Chu·∫©n b·ªã payload d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng JSON
        const payloadObject = {
            pass: pass,
            action: 'tomTatByAI',
            content: content
        };

        try {
            const response = await fetch(PROXY_URL, {
                method: 'POST',
                // S·ª≠ d·ª•ng JSON.stringify NH∆Ø TRONG handleYouTube.js
                // KH√îNG KHAI B√ÅO HEADERS
                body: JSON.stringify(payloadObject) 
            });

            if (!response.ok) {
                // Apps Script th∆∞·ªùng tr·∫£ v·ªÅ 200, nh∆∞ng ta v·∫´n ki·ªÉm tra l·ªói m·∫°ng
                return `L·ªói Proxy: Ph·∫£n h·ªìi kh√¥ng th√†nh c√¥ng (${response.status} ${response.statusText})`;
            }

            const result = await response.json();
            
            // === LOGIC X·ª¨ L√ù K·∫æT QU·∫¢ GI·ªêNG handleYouTube.js ===
            if (result.code !== 1) {
                // L·ªói API/X√°c th·ª±c/logic t·ª´ App Script
                console.error("[Ext] L·ªói t·ª´ App Script/Gemini:", result.error, result.details);
                return `L·ªói t√≥m t·∫Øt AI (Code ${result.code}): ${result.error || result.details || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`;
            }

            // N·∫øu code = 1, l·∫•y n·ªôi dung t√≥m t·∫Øt t·ª´ tr∆∞·ªùng 'data' (ƒë√£ ƒë∆∞·ª£c th·ªëng nh·∫•t)
            if (result.data) {
                // Ch√∫ng ta s·∫Ω gi·∫£ ƒë·ªãnh n·ªôi dung t√≥m t·∫Øt l√† text thu·∫ßn t√∫y
                return result.data.replace(/\n/g, '<br>'); // Thay th·∫ø k√Ω t·ª± xu·ªëng d√≤ng b·∫±ng <br> cho HTML
            } else {
                return "AI kh√¥ng th·ªÉ t√≥m t·∫Øt n·ªôi dung n√†y (k·∫øt qu·∫£ th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ tr∆∞·ªùng 'data').";
            }

        } catch (error) {
            console.error("[Ext] L·ªói trong qu√° tr√¨nh fetch Proxy:", error);
            return `L·ªói k·∫øt n·ªëi ƒë·∫øn Google App Script: ${error.message}`;
        }
    };


    /**
     * H√†m ch√≠nh ƒë·ªÉ qu√©t v√† ch√®n n√∫t.
     */
    let scanCounter = 0;
    const scanAndAttachFacebook = () => {
        scanCounter++;
        // console.log(`[Ext] Qu√©t l·∫ßn th·ª© ${scanCounter}...`);

        // 1. T√¨m T·∫§T C·∫¢ c√°c n√∫t "3 ch·∫•m" tr√™n to√†n trang
        const anchorButtons = document.querySelectorAll(ANCHOR_SELECTOR);

        if (anchorButtons.length === 0) {
            // console.log("[Ext] Kh√¥ng t√¨m th·∫•y n√∫t anchor (3 ch·∫•m) n√†o.");
            return;
        }

        anchorButtons.forEach((anchorButton, index) => {
            
            // 2. Leo c·∫•p DOM ƒë·ªÉ t√¨m container
            let targetContainer = null;
            let beforeElement = null;
            let wrapper = null;

            // T√åM TH·∫§Y N√öT "3 CH·∫§M"
            // Leo 2 c·∫•p (div.button -> div.wrapper -> div.container)
            wrapper = anchorButton.parentElement;
            if (wrapper) wrapper = wrapper.parentElement; 

            if (wrapper && wrapper.parentElement) {
                targetContainer = wrapper.parentElement;
                // Ch√®n v√†o TR∆Ø·ªöC wrapper c·ªßa n√∫t 3 ch·∫•m
                beforeElement = wrapper;
            } else {
                console.warn(`[Ext] ‚ö†Ô∏è L·ªói logic 3 ch·∫•m: Kh√¥ng t√¨m th·∫•y container.`, anchorButton);
                return;
            }
            

            // 3. Ki·ªÉm tra xem container n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
            if (!targetContainer || targetContainer.hasAttribute(PROCESSED_MARKER)) {
                // Container kh√¥ng h·ª£p l·ªá HO·∫∂C ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                return;
            }

            // 4. ƒê√°nh d·∫•u container l√† ƒë√£ x·ª≠ l√Ω
            targetContainer.setAttribute(PROCESSED_MARKER, "1");

            // 5. Ch√®n n√∫t
            injectButton(targetContainer, beforeElement, index);
        });
    };

    /**
     * T√°ch logic l·∫•y th√¥ng tin b√†i vi·∫øt ra h√†m ri√™ng
     * H√†m n√†y l√† ASYNC ƒë·ªÉ x·ª≠ l√Ω "Xem th√™m"
     */
    const getPostInfo = async (post) => {
        
        // === 1. L·∫§Y T√ÅC GI·∫¢ (V√Ä GROUP) ===
        let authorName = 'Kh√¥ng t√¨m th·∫•y t√°c gi·∫£';
        let authorUrl = 'Kh√¥ng t√¨m th·∫•y URL t√°c gi·∫£';
        let groupName = null;
        let groupUrl = null;

        // Method 1: D√πng aria-labelledby (ƒê√°ng tin c·∫≠y nh·∫•t)
        const authorLabelId = post.getAttribute('aria-labelledby');
        if (authorLabelId) {
            const labelEl = document.getElementById(authorLabelId); // ƒê√¢y l√† element c√≥ ID (th∆∞·ªùng l√† H4)
            if (labelEl) {
                const mainLinkEl = labelEl.querySelector('a');
                
                // KI·ªÇM TRA XEM ƒê√ÇY C√ì PH·∫¢I B√ÄI ƒêƒÇNG GROUP KH√îNG
                if (mainLinkEl && (mainLinkEl.href.includes('/groups/') || mainLinkEl.href.includes('/gaming/'))) {
                    // ƒê√ÇY L√Ä B√ÄI ƒêƒÇNG GROUP (ho·∫∑c GROUP GAMING)
                    groupName = labelEl.innerText.trim();
                    groupUrl = mainLinkEl.href;

                    // B√¢y gi·ªù, t√¨m link t√°c gi·∫£ th·∫≠t (c√≥ ch·ª©a /user/ ho·∫∑c l√† link th·ª© 2 trong header)
                    // Th√™m [tabindex="0"] ƒë·ªÉ b·ªè qua link avatar
                    const authorLinkEl = post.querySelector('a[href*="/user/"][tabindex="0"], a[href*="?id="][tabindex="0"]'); // M·ªü r·ªông t√¨m c·∫£ user ID
                    if (authorLinkEl) {
                        authorName = authorLinkEl.innerText.trim();
                        authorUrl = authorLinkEl.href;
                    } else {
                        authorName = "Kh√¥ng t√¨m th·∫•y t√°c gi·∫£ (trong group)";
                        // authorUrl ƒë√£ ƒë∆∞·ª£c set m·∫∑c ƒë·ªãnh
                    }
                } else if (mainLinkEl) {
                    // ƒê√ÇY L√Ä B√ÄNG ƒêƒÇNG C√Å NH√ÇN (HO·∫∂C PAGE)
                    authorName = labelEl.innerText.trim();
                    authorUrl = mainLinkEl.href;
                } else {
                    // Fallback n·∫øu c√≥ labelEl nh∆∞ng kh√¥ng c√≥ link (hi·∫øm)
                    authorName = labelEl.innerText.trim();
                }
            }
        }

        // Method 2: Fallback v·ªÅ logic c≈© n·∫øu Method 1 th·∫•t b·∫°i
        if (authorName === 'Kh√¥ng t√¨m th·∫•y t√°c gi·∫£') {
            const authorEl = post.querySelector('h4 a, strong a'); 
            if (authorEl) {
                 authorName = authorEl.innerText.trim();
                 authorUrl = authorEl.href;
            }
        }

        // L√†m s·∫°ch authorUrl (Lo·∫°i b·ªè tracking params)
        if (authorUrl && authorUrl.startsWith('http')) {
            try {
                const url = new URL(authorUrl);
                authorUrl = url.origin + url.pathname; // Ch·ªâ l·∫•y domain + path
            } catch (e) {
                console.warn("[Ext] Kh√¥ng th·ªÉ parse authorUrl, d√πng gi√° tr·ªã g·ªëc.", e);
            }
        }
        // L√†m s·∫°ch groupUrl (n·∫øu c√≥)
        if (groupUrl && groupUrl.startsWith('http')) {
            try {
                const url = new URL(groupUrl);
                groupUrl = url.origin + url.pathname; // Ch·ªâ l·∫•y domain + path
            } catch (e) {
                console.warn("[Ext] Kh√¥ng th·ªÉ parse groupUrl, d√πng gi√° tr·ªã g·ªëc.", e);
            }
        }
        
        // === 2. TH·ªúI GIAN & URL B√ÄI VI·∫æT ===
        let timeText = 'Kh√¥ng t√¨m th·∫•y th·ªùi gian';
        let postUrl = 'Kh√¥ng t√¨m th·∫•y URL b√†i vi·∫øt';
        let timeEl = null;

        // T√¨m T·∫§T C·∫¢ c√°c link kh·ªõp, v√† l·∫•y c√°i CU·ªêI C√ôNG (th∆∞·ªùng l√† timestamp permalink)
        const timeEls = post.querySelectorAll('a[href*="/posts/"], a[href*="?story_fbid="], a[href*="/videos/"], a[href*="/watch/"]');
        
        if (timeEls.length > 0) {
            // L·∫•y c√°i cu·ªëi c√πng
            timeEl = timeEls[timeEls.length - 1]; 
            postUrl = timeEl.href; // URL th√¨ ch·∫Øc ch·∫Øn ƒë√∫ng

            // === QU√âT NG∆Ø·ª¢C L√äN C√ÅC TH·∫∫ CHA ƒê·ªÇ T√åM THU·ªòC T√çNH TITLE/ARIA-LABEL (TOOLTIP) ===
            let found = false;
            let currentEl = timeEl;
            let count = 0;

            // Qu√©t th·∫ª hi·ªán t·∫°i v√† 4 th·∫ª cha m·∫π (t·ªïng c·ªông 5 c·∫•p)
            while (currentEl && count < 5) {
                // ∆Øu ti√™n Title (Tooltip)
                if (currentEl.title && currentEl.title.length > 5) {
                    timeText = currentEl.title;
                    found = true;
                    break;
                }
                // Sau ƒë√≥ l√† Aria-Label (th∆∞·ªùng ch·ª©a th·ªùi gian ƒë·∫ßy ƒë·ªß)
                if (currentEl.getAttribute('aria-label') && currentEl.getAttribute('aria-label').length > 5) {
                    timeText = currentEl.getAttribute('aria-label');
                    found = true;
                    break;
                }
                currentEl = currentEl.parentElement;
                count++;
            }
            
            // N·∫øu kh√¥ng t√¨m th·∫•y trong th·∫ª cha, th·ª≠ qu√©t s√¢u c√°c th·∫ª con
            if (!found) {
                const allChildren = timeEl.querySelectorAll('*');
                for(const child of allChildren) {
                    if (child.title && child.title.length > 5) { 
                        timeText = child.title;
                        found = true;
                        break;
                    }
                    if (child.getAttribute('aria-label') && child.getAttribute('aria-label').length > 5) {
                        timeText = child.getAttribute('aria-label');
                        found = true;
                        break;
                    }
                }
            }

            // Fallback cu·ªëi c√πng l√† innerText
            if (!found && timeEl.innerText.length > 0) {
                 timeText = timeEl.innerText.trim();
            }
        }

        // L√†m s·∫°ch postUrl
        if (postUrl && postUrl.startsWith('http')) {
             try {
                const url = new URL(postUrl);
                postUrl = url.origin + url.pathname; 
            } catch (e) {
                console.warn("[Ext] Kh√¥ng th·ªÉ parse postUrl, d√πng gi√° tr·ªã g·ªëc.", e);
            }
        }

        // === 3. N·ªòI DUNG (LOGIC T·ª∞ ƒê·ªòNG CLICK "XEM TH√äM") ===
        let postContent = "";
        let messageBlock = post.querySelector('div[data-ad-preview="message"]');
        
        // TR∆Ø·ªúNG H·ª¢P 1: C·∫•u tr√∫c th√¥ng th∆∞·ªùng (c√≥ data-ad-preview="message")
        if (messageBlock) {
            // Log hi·ªán t·∫°i l√†: [Ext] Kh√¥ng t√¨m th·∫•y 'data-ad-preview="message"'. D√πng logic c≈©.
            // ƒêo·∫°n n√†y kh√¥ng ch·∫°y n·∫øu c√≥ log tr√™n.
        } else {
            // TR∆Ø·ªúNG H·ª¢P 2: Group ho·∫∑c c√°c c·∫•u tr√∫c kh√°c (Kh√¥ng c√≥ data-ad-preview)
            console.log("[Ext] Kh√¥ng t√¨m th·∫•y 'data-ad-preview=\"message\"'. Th·ª≠ t√¨m kh·ªëi n·ªôi dung thay th·∫ø.");
            // Selector ph·ªï bi·∫øn cho n·ªôi dung b√†i vi·∫øt trong c√°c c·∫•u tr√∫c ph·ª©c t·∫°p (group, page)
            // T√¨m ƒë·∫øn th·∫ª div c√≥ vai tr√≤ l√† content block (th∆∞·ªùng l√† anh em c·ªßa block like/comment)
            messageBlock = post.querySelector('div[role="article"] > div:nth-child(2) > div:nth-child(2) > div:nth-child(2), div[data-testid="post_message"]');
            
            if (!messageBlock) {
                 console.warn("[Ext] ‚ö†Ô∏è Th·∫•t b·∫°i khi t√¨m kh·ªëi n·ªôi dung thay th·∫ø. S·ª≠ d·ª•ng logic fallback ƒë∆°n gi·∫£n.");
                 // Fallback: T√¨m T·∫§T C·∫¢ c√°c ƒëo·∫°n vƒÉn b·∫£n trong b√†i vi·∫øt.
                 const contentElements = post.querySelectorAll('div[dir="auto"]');
                 contentElements.forEach(el => {
                     const role = el.getAttribute('role');
                     const hasSeeMore = el.querySelector('div[role="button"]');
                     if (role !== 'button' && !hasSeeMore) {
                         postContent += el.innerText + "\n";
                     }
                 });
                 return {
                     authorName,
                     authorUrl,
                     groupName,
                     groupUrl,
                     timeText,
                     postUrl,
                     postContent: postContent.trim() || "Kh√¥ng t√¨m th·∫•y n·ªôi dung text."
                 };
            }
            // N·∫øu t√¨m th·∫•y kh·ªëi thay th·∫ø, ti·∫øp t·ª•c x·ª≠ l√Ω nh∆∞ b√¨nh th∆∞·ªùng ·ªü d∆∞·ªõi
        }
        
        if (messageBlock) {
            // A. T√¨m n√∫t "Xem th√™m" B√äN TRONG kh·ªëi message
            const seeMoreButton = Array.from(messageBlock.querySelectorAll('div[role="button"]'))
                                      .find(btn => btn.innerText.includes("Xem th√™m") || btn.innerText.includes("See more"));

            // B. N·∫øu t√¨m th·∫•y -> click v√† ch·ªù
            if (seeMoreButton) {
                console.log("[Ext] 'Xem th√™m' detected. Clicking and waiting 500ms...");
                seeMoreButton.click();
                // Ch·ªù 500ms ƒë·ªÉ Facebook m·ªü r·ªông n·ªôi dung
                await new Promise(resolve => setTimeout(resolve, 500)); 
                console.log("[Ext] Waited 500ms. Now scraping expanded content.");
            }

            // C. (Sau khi ƒë√£ click, ho·∫∑c n·∫øu kh√¥ng c√≥ n√∫t)
            const clone = messageBlock.cloneNode(true);

            // X√≥a n√∫t "Xem th√™m" (ph·∫£i l√†m TR∆Ø·ªöC khi x·ª≠ l√Ω emoji)
            clone.querySelectorAll('div[role="button"]').forEach(button => {
                if (button.innerText.includes("Xem th√™m") || button.innerText.includes("See more")) {
                    button.remove();
                }
            });

            // X·ª¨ L√ù EMOJI
            clone.querySelectorAll('img[alt]').forEach(emoji => {
                if (emoji.alt) {
                    // Thay th·∫ø <img> b·∫±ng m·ªôt text node ch·ª©a n·ªôi dung 'alt'
                    emoji.replaceWith(document.createTextNode(emoji.alt));
                } else {
                    // X√≥a img n·∫øu kh√¥ng c√≥ alt ƒë·ªÉ tr√°nh r√°c
                    emoji.remove();
                }
            });
            
            // X·ª¨ L√ù XU·ªêNG D√íNG
            // Facebook d√πng c√°c <div dir="auto"> cho m·ªói d√≤ng/ƒëo·∫°n.
            // L·∫•y text c·ªßa t·ª´ng div v√† join l·∫°i b·∫±ng k√Ω t·ª± xu·ªëng d√≤ng.
            const paragraphDivs = clone.querySelectorAll('div[dir="auto"]');
            if (paragraphDivs.length > 0) {
                postContent = Array.from(paragraphDivs)
                    .map(p => p.innerText) // Kh√¥ng .trim() ·ªü ƒë√¢y ƒë·ªÉ gi·ªØ th·ª•t ƒë·∫ßu d√≤ng (n·∫øu c√≥)
                    .join('\n'); // N·ªëi l·∫°i b·∫±ng d·∫•u xu·ªëng d√≤ng th·∫≠t
            } else {
                // Fallback n·∫øu c·∫•u tr√∫c kh√°c (v√≠ d·ª•: kh√¥ng c√≥ 'div[dir="auto"]' l·ªìng nhau)
                postContent = clone.innerText.trim(); 
            }
        }
        
        // 4. Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng
        return {
            authorName,
            authorUrl,
            groupName, // <-- TH√äM M·ªöI
            groupUrl,  // <-- TH√äM M·ªöI
            timeText,
            postUrl,
            postContent: postContent || "Kh√¥ng t√¨m th·∫•y n·ªôi dung text."
        };
    };


    /**
     * H√†m t·∫°o v√† ch√®n n√∫t
     */
    const injectButton = (targetContainer, beforeElement, index) => {
        
        const summarizeBtn = document.createElement("div");
        summarizeBtn.innerText = "T√≥m T·∫Øt";
        summarizeBtn.title = "T√≥m t·∫Øt b√†i vi·∫øt n√†y (b·ªüi L·∫≠p's Ext)";
        summarizeBtn.className = INJECTED_CLASS; // Th√™m class

        Object.assign(summarizeBtn.style, {
            cursor: "pointer",
            padding: "8px",
            borderRadius: "6px",
            fontWeight: "bold",
            fontSize: "13px",
            color: "var(--primary-text-color, #050505)", // <-- THAY ƒê·ªîI M√ÄU
            lineHeight: "1",
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
        });
        summarizeBtn.onmouseover = () => { summarizeBtn.style.backgroundColor = "var(--hover-overlay, #EBEDF0)"; }; // <-- D√πng m√†u hover c·ªßa FB
        summarizeBtn.onmouseout = () => { summarizeBtn.style.backgroundColor = "transparent"; };

        // S·ª≠a th√†nh ASYNC function ƒë·ªÉ c√≥ th·ªÉ "await"
        summarizeBtn.onclick = async (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log(`[Ext] N√∫t 'T√≥m T·∫Øt' ƒë∆∞·ª£c click!`);
            
            // 1. Thay ƒë·ªïi text n√∫t v√† v√¥ hi·ªáu h√≥a
            const originalText = summarizeBtn.innerText;
            summarizeBtn.innerText = "ƒêang t√≥m t·∫Øt...";
            summarizeBtn.style.pointerEvents = 'none'; // V√¥ hi·ªáu h√≥a n√∫t

            // Leo l√™n t√¨m `div[aria-labelledby]` g·∫ßn nh·∫•t, v√¨ `div[role="article"]` kh√¥ng ƒë√°ng tin c·∫≠y
            const post = targetContainer.closest('div[aria-labelledby]');
            if (!post) {
                console.error("[Ext] Kh√¥ng th·ªÉ t√¨m th·∫•y 'post' g·ªëc (div[aria-labelledby]) khi click!");
                // Kh√¥i ph·ª•c n√∫t
                summarizeBtn.innerText = originalText;
                summarizeBtn.style.pointerEvents = 'auto';
                return;
            }

            console.log("[Ext] ƒêang l·∫•y th√¥ng tin b√†i vi·∫øt (c√≥ th·ªÉ m·∫•t 0.5s)...");
            
            // 2. L·∫•y th√¥ng tin b√†i vi·∫øt (bao g·ªìm n·ªôi dung)
            const postInfo = await getPostInfo(post);

            // 3. KI·ªÇM TRA ƒê·ªò D√ÄI
            const postContentLength = postInfo.postContent.length;
            
            if (postContentLength < MIN_LENGTH) {
                const shortMessage = `B√†i vi·∫øt n√†y qu√° ng·∫Øn (${postContentLength} k√Ω t·ª±, gi·ªõi h·∫°n l√† ${MIN_LENGTH} k√Ω t·ª±). Kh√¥ng c·∫ßn t√≥m t·∫Øt.`;
                console.warn(`[Ext] ‚ö†Ô∏è ${shortMessage}`);
                showSummaryPopup(shortMessage, postInfo, true); // True b√°o hi·ªáu b√†i vi·∫øt ng·∫Øn
                
                // Kh√¥i ph·ª•c n√∫t
                summarizeBtn.innerText = originalText;
                summarizeBtn.style.pointerEvents = 'auto';
                return; // D·ª´ng x·ª≠ l√Ω
            }

            // 4. G·ªçi AI th√¥ng qua Proxy
            let summaryText = 'Kh√¥ng th·ªÉ t√≥m t·∫Øt.';
            
            if (postInfo.postContent && postContentLength > 50) { // Ch·ªâ t√≥m t·∫Øt n·∫øu n·ªôi dung ƒë·ªß d√†i (safety check)
                console.log(`[Ext] ƒêang g·ª≠i ${postContentLength} k√Ω t·ª± n·ªôi dung ƒë·∫øn Proxy App Script...`);
                summaryText = await summarizePostContent(postInfo.postContent); // <--- S·ª¨ D·ª§NG H√ÄM PROXY M·ªöI
            } else {
                 summaryText = 'N·ªôi dung b√†i vi·∫øt qu√° ng·∫Øn ho·∫∑c kh√¥ng t√¨m th·∫•y ƒë·ªÉ t√≥m t·∫Øt.';
            }

            // 5. HI·ªÇN TH·ªä K·∫æT QU·∫¢ TRONG POPUP
            // Lu√¥n g·ªçi showSummaryPopup, b·∫•t k·ªÉ l√† k·∫øt qu·∫£ t√≥m t·∫Øt hay l·ªói
            showSummaryPopup(summaryText, postInfo); 
            
            // 6. Kh√¥i ph·ª•c n√∫t
            summarizeBtn.innerText = originalText;
            summarizeBtn.style.pointerEvents = 'auto';
        };

        targetContainer.insertBefore(summarizeBtn, beforeElement);
        // console.log(`[Ext] ‚úÖ ƒê√£ ch√®n n√∫t 'T√≥m T·∫Øt' (Anchor #${index}).`); // T·∫Øt b·ªõt log
    }


    // 7. S·ª≠ d·ª•ng MutationObserver...
    console.log("[Ext] ƒêang t·∫°o MutationObserver (v40)...");
    let debounceTimer;
    const observer = new MutationObserver((mutationsList) => {
        // Ch·ªâ c·∫ßn bi·∫øt c√≥ thay ƒë·ªïi l√† qu√©t
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(scanAndAttachFacebook, 300); // TƒÉng debounce
    });

    observer.observe(document.body, { childList: true, subtree: true });

    // 8. Ch·∫°y qu√©t l·∫ßn ƒë·∫ßu sau 1.5 gi√¢y (ch·ªù trang t·∫£i)
    console.log("[Ext] Ch·ªù 1.5s ƒë·ªÉ qu√©t l·∫ßn ƒë·∫ßu...");
    setTimeout(scanAndAttachFacebook, 1500);

})();